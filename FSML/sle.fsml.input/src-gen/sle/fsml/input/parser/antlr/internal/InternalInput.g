/*
* generated by Xtext
*/
grammar InternalInput;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package sle.fsml.input.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package sle.fsml.input.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import sle.fsml.input.services.InputGrammarAccess;

}

@parser::members {

 	private InputGrammarAccess grammarAccess;
 	
    public InternalInputParser(TokenStream input, InputGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Input";	
   	}
   	
   	@Override
   	protected InputGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	 iv_ruleInput=ruleInput 
	 { $current=$iv_ruleInput.current; } 
	 EOF 
;

// Rule Input
ruleInput returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getInputAccess().getInputAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInputAccess().getLeftSquareBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getInputAccess().getInputsInputEntryParserRuleCall_2_0_0()); 
	    }
		lv_inputs_2_0=ruleInputEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputRule());
	        }
       		add(
       			$current, 
       			"inputs",
        		lv_inputs_2_0, 
        		"InputEntry");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInputAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInputAccess().getInputsInputEntryParserRuleCall_2_1_1_0()); 
	    }
		lv_inputs_4_0=ruleInputEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputRule());
	        }
       		add(
       			$current, 
       			"inputs",
        		lv_inputs_4_0, 
        		"InputEntry");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInputAccess().getRightSquareBracketKeyword_3());
    }
	otherlv_6='.' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getInputAccess().getFullStopKeyword_4());
    }
)
;





// Entry rule entryRuleInputEntry
entryRuleInputEntry returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputEntryRule()); }
	 iv_ruleInputEntry=ruleInputEntry 
	 { $current=$iv_ruleInputEntry.current; } 
	 EOF 
;

// Rule InputEntry
ruleInputEntry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_ID
		{
			newLeafNode(lv_value_0_0, grammarAccess.getInputEntryAccess().getValueIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInputEntryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"ID");
	    }

)
)
;





RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_CM : '%' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


