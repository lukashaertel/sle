/*
* generated by Xtext
*/
grammar InternalRun;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package sle.fsml.run.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package sle.fsml.run.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import sle.fsml.run.services.RunGrammarAccess;

}

@parser::members {

 	private RunGrammarAccess grammarAccess;
 	
    public InternalRunParser(TokenStream input, RunGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Runfile";	
   	}
   	
   	@Override
   	protected RunGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRunfile
entryRuleRunfile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRunfileRule()); }
	 iv_ruleRunfile=ruleRunfile 
	 { $current=$iv_ruleRunfile.current; } 
	 EOF 
;

// Rule Runfile
ruleRunfile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRunfileAccess().getRunfileAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRunfileAccess().getRunsRunParserRuleCall_1_0()); 
	    }
		lv_runs_1_0=ruleRun		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRunfileRule());
	        }
       		add(
       			$current, 
       			"runs",
        		lv_runs_1_0, 
        		"Run");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleRun
entryRuleRun returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRunRule()); }
	 iv_ruleRun=ruleRun 
	 { $current=$iv_ruleRun.current; } 
	 EOF 
;

// Rule Run
ruleRun returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='run' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRunAccess().getRunKeyword_0());
    }
(
(
		lv_machine_1_0=RULE_STRING
		{
			newLeafNode(lv_machine_1_0, grammarAccess.getRunAccess().getMachineSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRunRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"machine",
        		lv_machine_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='on' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRunAccess().getOnKeyword_2());
    }
(
(
		lv_input_3_0=RULE_STRING
		{
			newLeafNode(lv_input_3_0, grammarAccess.getRunAccess().getInputSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRunRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"input",
        		lv_input_3_0, 
        		"STRING");
	    }

)
)	otherlv_4='to' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRunAccess().getToKeyword_4());
    }
(
(
		lv_target_5_0=RULE_STRING
		{
			newLeafNode(lv_target_5_0, grammarAccess.getRunAccess().getTargetSTRINGTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRunRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"target",
        		lv_target_5_0, 
        		"STRING");
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


