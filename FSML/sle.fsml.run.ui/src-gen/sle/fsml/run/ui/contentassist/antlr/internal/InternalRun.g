/*
* generated by Xtext
*/
grammar InternalRun;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package sle.fsml.run.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package sle.fsml.run.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import sle.fsml.run.services.RunGrammarAccess;

}

@parser::members {
 
 	private RunGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(RunGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleRunfile
entryRuleRunfile 
:
{ before(grammarAccess.getRunfileRule()); }
	 ruleRunfile
{ after(grammarAccess.getRunfileRule()); } 
	 EOF 
;

// Rule Runfile
ruleRunfile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRunfileAccess().getGroup()); }
(rule__Runfile__Group__0)
{ after(grammarAccess.getRunfileAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRun
entryRuleRun 
:
{ before(grammarAccess.getRunRule()); }
	 ruleRun
{ after(grammarAccess.getRunRule()); } 
	 EOF 
;

// Rule Run
ruleRun
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRunAccess().getGroup()); }
(rule__Run__Group__0)
{ after(grammarAccess.getRunAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMachine
entryRuleMachine 
:
{ before(grammarAccess.getMachineRule()); }
	 ruleMachine
{ after(grammarAccess.getMachineRule()); } 
	 EOF 
;

// Rule Machine
ruleMachine
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMachineAccess().getAlternatives()); }
(rule__Machine__Alternatives)
{ after(grammarAccess.getMachineAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMachineReference
entryRuleMachineReference 
:
{ before(grammarAccess.getMachineReferenceRule()); }
	 ruleMachineReference
{ after(grammarAccess.getMachineReferenceRule()); } 
	 EOF 
;

// Rule MachineReference
ruleMachineReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMachineReferenceAccess().getFsmAssignment()); }
(rule__MachineReference__FsmAssignment)
{ after(grammarAccess.getMachineReferenceAccess().getFsmAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMachineLocation
entryRuleMachineLocation 
:
{ before(grammarAccess.getMachineLocationRule()); }
	 ruleMachineLocation
{ after(grammarAccess.getMachineLocationRule()); } 
	 EOF 
;

// Rule MachineLocation
ruleMachineLocation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMachineLocationAccess().getLocationAssignment()); }
(rule__MachineLocation__LocationAssignment)
{ after(grammarAccess.getMachineLocationAccess().getLocationAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInput
entryRuleInput 
:
{ before(grammarAccess.getInputRule()); }
	 ruleInput
{ after(grammarAccess.getInputRule()); } 
	 EOF 
;

// Rule Input
ruleInput
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInputAccess().getAlternatives()); }
(rule__Input__Alternatives)
{ after(grammarAccess.getInputAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInputReference
entryRuleInputReference 
:
{ before(grammarAccess.getInputReferenceRule()); }
	 ruleInputReference
{ after(grammarAccess.getInputReferenceRule()); } 
	 EOF 
;

// Rule InputReference
ruleInputReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInputReferenceAccess().getInputAssignment()); }
(rule__InputReference__InputAssignment)
{ after(grammarAccess.getInputReferenceAccess().getInputAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInputLocation
entryRuleInputLocation 
:
{ before(grammarAccess.getInputLocationRule()); }
	 ruleInputLocation
{ after(grammarAccess.getInputLocationRule()); } 
	 EOF 
;

// Rule InputLocation
ruleInputLocation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInputLocationAccess().getLocationAssignment()); }
(rule__InputLocation__LocationAssignment)
{ after(grammarAccess.getInputLocationAccess().getLocationAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Machine__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineAccess().getMachineReferenceParserRuleCall_0()); }
	ruleMachineReference
{ after(grammarAccess.getMachineAccess().getMachineReferenceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMachineAccess().getMachineLocationParserRuleCall_1()); }
	ruleMachineLocation
{ after(grammarAccess.getMachineAccess().getMachineLocationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getInputReferenceParserRuleCall_0()); }
	ruleInputReference
{ after(grammarAccess.getInputAccess().getInputReferenceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInputAccess().getInputLocationParserRuleCall_1()); }
	ruleInputLocation
{ after(grammarAccess.getInputAccess().getInputLocationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Runfile__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Runfile__Group__0__Impl
	rule__Runfile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Runfile__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRunfileAccess().getRunfileAction_0()); }
(

)
{ after(grammarAccess.getRunfileAccess().getRunfileAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Runfile__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Runfile__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Runfile__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getRunfileAccess().getRunsAssignment_1()); }
(rule__Runfile__RunsAssignment_1)
{ after(grammarAccess.getRunfileAccess().getRunsAssignment_1()); }
)
(
{ before(grammarAccess.getRunfileAccess().getRunsAssignment_1()); }
(rule__Runfile__RunsAssignment_1)*
{ after(grammarAccess.getRunfileAccess().getRunsAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Run__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Run__Group__0__Impl
	rule__Run__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Run__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRunAccess().getRunKeyword_0()); }

	'run' 

{ after(grammarAccess.getRunAccess().getRunKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Run__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Run__Group__1__Impl
	rule__Run__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Run__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRunAccess().getMachineAssignment_1()); }
(rule__Run__MachineAssignment_1)
{ after(grammarAccess.getRunAccess().getMachineAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Run__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Run__Group__2__Impl
	rule__Run__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Run__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRunAccess().getOnKeyword_2()); }

	'on' 

{ after(grammarAccess.getRunAccess().getOnKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Run__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Run__Group__3__Impl
	rule__Run__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Run__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRunAccess().getInputAssignment_3()); }
(rule__Run__InputAssignment_3)
{ after(grammarAccess.getRunAccess().getInputAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Run__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Run__Group__4__Impl
	rule__Run__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Run__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRunAccess().getToKeyword_4()); }

	'to' 

{ after(grammarAccess.getRunAccess().getToKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Run__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Run__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Run__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRunAccess().getTargetAssignment_5()); }
(rule__Run__TargetAssignment_5)
{ after(grammarAccess.getRunAccess().getTargetAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}















rule__Runfile__RunsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRunfileAccess().getRunsRunParserRuleCall_1_0()); }
	ruleRun{ after(grammarAccess.getRunfileAccess().getRunsRunParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Run__MachineAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRunAccess().getMachineMachineParserRuleCall_1_0()); }
	ruleMachine{ after(grammarAccess.getRunAccess().getMachineMachineParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Run__InputAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRunAccess().getInputInputParserRuleCall_3_0()); }
	ruleInput{ after(grammarAccess.getRunAccess().getInputInputParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Run__TargetAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRunAccess().getTargetSTRINGTerminalRuleCall_5_0()); }
	RULE_STRING{ after(grammarAccess.getRunAccess().getTargetSTRINGTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MachineReference__FsmAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineReferenceAccess().getFsmFSMCrossReference_0()); }
(
{ before(grammarAccess.getMachineReferenceAccess().getFsmFSMIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getMachineReferenceAccess().getFsmFSMIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getMachineReferenceAccess().getFsmFSMCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MachineLocation__LocationAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineLocationAccess().getLocationSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getMachineLocationAccess().getLocationSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InputReference__InputAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputReferenceAccess().getInputInputCrossReference_0()); }
(
{ before(grammarAccess.getInputReferenceAccess().getInputInputIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getInputReferenceAccess().getInputInputIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getInputReferenceAccess().getInputInputCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InputLocation__LocationAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputLocationAccess().getLocationSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getInputLocationAccess().getLocationSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


