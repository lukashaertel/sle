/*
 * generated by Xtext
 */
package sle.gbt.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess

import sle.gbt.xtext.icc.ICC
import org.eclipse.emf.ecore.EObject
import java.util.List
import org.eclipse.xtext.ParserRule
import sle.gbt.xtext.icc.XtextToSG
import sle.gbt.xtext.gBTS.Def
import sle.gbt.xtext.gBTS.Apply

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class GBTSGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for (test : resource.allContents.filter(Def).toIterable) {

			// Extract terminals and grammar
			val terminals = XtextToSG.terminalsFrom(test.ref)
			val grammar = XtextToSG.grammarFrom(test.ref)

			for (sub : test.substitutions) {
				grammar.put(sub.rule.name, sub.substitution)
			}

			// Create iterator host
			val icc = new ICC(terminals, grammar)

			// Create the ranges
			val range = newArrayList
			for (apply : resource.allContents.filter(Apply).toIterable) {
				if(apply.hasMax)
					if(apply.hasSpace)
						range +=
							(0 .. ((apply.max - apply.minOrIt) / apply.space)).map[apply.minOrIt + it * apply.space]
					else
						range += apply.minOrIt .. apply.max
				else
					range += apply.minOrIt
			}

			// Find the start-rule
			val startrule = if(test.hasStartrule)
					test.startrule.name
				else
					test.ref.rules.filter(ParserRule).head.name

			// Generate the testfile
			fsa.generateFile('''«test.name».htm''',
				'''
					<html>
						<head>
							<title>«test.name»</title>
						</head>
						<body>
							<p><table border="1" width="640">
								<tr>
									<th colspan="2">Generated tests</th>
								</tr>
							«FOR i : range SEPARATOR '''<tr>
									<td colspan="2">&nbsp;</td>
								</tr>'''»
								<tr>
									<td>«i»</td>
								</tr>
								<tr>
									<td><code>«icc.iterate(grammar.get(startrule), ICC.INITIAL_LBR).iterator(i).head»</code></td>
								</tr>
							«ENDFOR»
							</table></p>
							
							<p><table border="1" width="640">
								<tr>
									<th colspan="2">Generated from the derived specification</th>
								</tr>
							«FOR ti : terminals.size >.. 0»
								<tr>
									<td>Terminal #«ti»</td>
									<td>«terminals.get(ti)»</td>
								</tr>
							«ENDFOR»
							<tr>
								<td colspan="2">&nbsp;</td>
							</tr>
							«FOR ge : grammar.entrySet»
								<tr>
									<td>Rule «ge.key»</td>
									<td>«ge.value»</td>
								</tr>
							«ENDFOR»
							</table></p>
						</body>
					</html>	
				''')
		}
	}
}
