/*
* generated by Xtext
*/
grammar InternalGBTS;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package sle.gbt.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package sle.gbt.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import sle.gbt.xtext.services.GBTSGrammarAccess;

}

@parser::members {

 	private GBTSGrammarAccess grammarAccess;
 	
    public InternalGBTSParser(TokenStream input, GBTSGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected GBTSGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getTestsTestParserRuleCall_0()); 
	    }
		lv_tests_0_0=ruleTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"tests",
        		lv_tests_0_0, 
        		"Test");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleTest
entryRuleTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestRule()); }
	 iv_ruleTest=ruleTest 
	 { $current=$iv_ruleTest.current; } 
	 EOF 
;

// Rule Test
ruleTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='test' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTestAccess().getTestKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTestAccess().getRefGrammarCrossReference_1_0()); 
	    }
		ruleQID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='start' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTestAccess().getStartKeyword_2_0());
    }
	otherlv_3='at' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTestAccess().getAtKeyword_2_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getTestAccess().getRuleAbstractRuleCrossReference_2_2_0()); 
	}

)
))?(	otherlv_5='with' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTestAccess().getWithKeyword_3_0());
    }
	otherlv_6='depth' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTestAccess().getDepthKeyword_3_1());
    }
(
(
		lv_depth_7_0=RULE_INT
		{
			newLeafNode(lv_depth_7_0, grammarAccess.getTestAccess().getDepthINTTerminalRuleCall_3_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"depth",
        		lv_depth_7_0, 
        		"INT");
	    }

)
))?)
;





// Entry rule entryRuleQID
entryRuleQID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQIDRule()); } 
	 iv_ruleQID=ruleQID 
	 { $current=$iv_ruleQID.current.getText(); }  
	 EOF 
;

// Rule QID
ruleQID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQIDAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQIDAccess().getFullStopKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getQIDAccess().getQIDParserRuleCall_1_1()); 
    }
    this_QID_2=ruleQID    {
		$current.merge(this_QID_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


