/*
* generated by Xtext
*/
package sle.gbt.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class GBTSGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cTestsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTestsTestParserRuleCall_0 = (RuleCall)cTestsAssignment.eContents().get(0);
		
		//Model:
		//	tests+=Test+;
		public ParserRule getRule() { return rule; }

		//tests+=Test+
		public Assignment getTestsAssignment() { return cTestsAssignment; }

		//Test
		public RuleCall getTestsTestParserRuleCall_0() { return cTestsTestParserRuleCall_0; }
	}

	public class TestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Test");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefGrammarCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefGrammarQIDParserRuleCall_1_0_1 = (RuleCall)cRefGrammarCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cStartKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cAtKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cRuleAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cRuleAbstractRuleCrossReference_2_2_0 = (CrossReference)cRuleAssignment_2_2.eContents().get(0);
		private final RuleCall cRuleAbstractRuleIDTerminalRuleCall_2_2_0_1 = (RuleCall)cRuleAbstractRuleCrossReference_2_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cDepthKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cDepthAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cDepthINTTerminalRuleCall_3_2_0 = (RuleCall)cDepthAssignment_3_2.eContents().get(0);
		
		//Test:
		//	"test" ref=[xtext::Grammar|QID] ("start" "at" rule=[xtext::AbstractRule])? ("with" "depth" depth=INT)?;
		public ParserRule getRule() { return rule; }

		//"test" ref=[xtext::Grammar|QID] ("start" "at" rule=[xtext::AbstractRule])? ("with" "depth" depth=INT)?
		public Group getGroup() { return cGroup; }

		//"test"
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }

		//ref=[xtext::Grammar|QID]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[xtext::Grammar|QID]
		public CrossReference getRefGrammarCrossReference_1_0() { return cRefGrammarCrossReference_1_0; }

		//QID
		public RuleCall getRefGrammarQIDParserRuleCall_1_0_1() { return cRefGrammarQIDParserRuleCall_1_0_1; }

		//("start" "at" rule=[xtext::AbstractRule])?
		public Group getGroup_2() { return cGroup_2; }

		//"start"
		public Keyword getStartKeyword_2_0() { return cStartKeyword_2_0; }

		//"at"
		public Keyword getAtKeyword_2_1() { return cAtKeyword_2_1; }

		//rule=[xtext::AbstractRule]
		public Assignment getRuleAssignment_2_2() { return cRuleAssignment_2_2; }

		//[xtext::AbstractRule]
		public CrossReference getRuleAbstractRuleCrossReference_2_2_0() { return cRuleAbstractRuleCrossReference_2_2_0; }

		//ID
		public RuleCall getRuleAbstractRuleIDTerminalRuleCall_2_2_0_1() { return cRuleAbstractRuleIDTerminalRuleCall_2_2_0_1; }

		//("with" "depth" depth=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"with"
		public Keyword getWithKeyword_3_0() { return cWithKeyword_3_0; }

		//"depth"
		public Keyword getDepthKeyword_3_1() { return cDepthKeyword_3_1; }

		//depth=INT
		public Assignment getDepthAssignment_3_2() { return cDepthAssignment_3_2; }

		//INT
		public RuleCall getDepthINTTerminalRuleCall_3_2_0() { return cDepthINTTerminalRuleCall_3_2_0; }
	}

	public class QIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cQIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		/// **
		//	 * Predicated true in abstract element ~ '=>' used on abstract element
		//	 * / / **
		//	 * Cardinality of abstract element ~ {null, '?', '+', '*'}
		//	 * / QID:
		//	ID ("." QID)?;
		public ParserRule getRule() { return rule; }

		//ID ("." QID)? / **
		//	 * Predicated true in abstract element ~ '=>' used on abstract element
		//	 * / / **
		//	 * Cardinality of abstract element ~ {null, '?', '+', '*'}
		//	 * /
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." QID / **
		//	 * Predicated true in abstract element ~ '=>' used on abstract element
		//	 * / / **
		//	 * Cardinality of abstract element ~ {null, '?', '+', '*'}
		//	 * /)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//QID
		public RuleCall getQIDParserRuleCall_1_1() { return cQIDParserRuleCall_1_1; }
	}
	
	
	private ModelElements pModel;
	private TestElements pTest;
	private QIDElements pQID;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public GBTSGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("sle.gbt.xtext.GBTS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	tests+=Test+;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Test:
	//	"test" ref=[xtext::Grammar|QID] ("start" "at" rule=[xtext::AbstractRule])? ("with" "depth" depth=INT)?;
	public TestElements getTestAccess() {
		return (pTest != null) ? pTest : (pTest = new TestElements());
	}
	
	public ParserRule getTestRule() {
		return getTestAccess().getRule();
	}

	/// **
	//	 * Predicated true in abstract element ~ '=>' used on abstract element
	//	 * / / **
	//	 * Cardinality of abstract element ~ {null, '?', '+', '*'}
	//	 * / QID:
	//	ID ("." QID)?;
	public QIDElements getQIDAccess() {
		return (pQID != null) ? pQID : (pQID = new QIDElements());
	}
	
	public ParserRule getQIDRule() {
		return getQIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
