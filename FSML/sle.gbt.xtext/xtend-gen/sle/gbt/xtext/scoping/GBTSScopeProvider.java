/**
 * generated by Xtext
 */
package sle.gbt.xtext.scoping;

import com.google.common.collect.Iterables;
import com.google.common.collect.Iterators;
import java.util.Iterator;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import sle.gbt.xtext.gBTS.Sub;
import sle.gbt.xtext.gBTS.Test;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it
 */
@SuppressWarnings("all")
public class GBTSScopeProvider extends AbstractDeclarativeScopeProvider {
  public static Iterable<AbstractRule> allRules(final Grammar g) {
    EList<Grammar> _usedGrammars = g.getUsedGrammars();
    final Function1<Grammar,Iterable<AbstractRule>> _function = new Function1<Grammar,Iterable<AbstractRule>>() {
      public Iterable<AbstractRule> apply(final Grammar it) {
        Iterable<AbstractRule> _allRules = GBTSScopeProvider.allRules(it);
        return _allRules;
      }
    };
    List<Iterable<AbstractRule>> _map = ListExtensions.<Grammar, Iterable<AbstractRule>>map(_usedGrammars, _function);
    Iterable<AbstractRule> _flatten = Iterables.<AbstractRule>concat(_map);
    TreeIterator<EObject> _eAllContents = g.eAllContents();
    Iterator<AbstractRule> _filter = Iterators.<AbstractRule>filter(_eAllContents, AbstractRule.class);
    Iterable<AbstractRule> _iterable = IteratorExtensions.<AbstractRule>toIterable(_filter);
    return Iterables.<AbstractRule>concat(_flatten, _iterable);
  }
  
  public IScope scope_Test_startrule(final Test t, final EReference r) {
    Grammar _ref = t.getRef();
    Iterable<AbstractRule> _allRules = GBTSScopeProvider.allRules(_ref);
    IScope _scopeFor = Scopes.scopeFor(_allRules);
    return _scopeFor;
  }
  
  public IScope scope_Sub_rule(final Sub s, final EReference r) {
    IScope _xblockexpression = null;
    {
      EObject _eContainer = s.eContainer();
      final Test t = ((Test) _eContainer);
      Grammar _ref = t.getRef();
      Iterable<AbstractRule> _allRules = GBTSScopeProvider.allRules(_ref);
      IScope _scopeFor = Scopes.scopeFor(_allRules);
      _xblockexpression = (_scopeFor);
    }
    return _xblockexpression;
  }
}
