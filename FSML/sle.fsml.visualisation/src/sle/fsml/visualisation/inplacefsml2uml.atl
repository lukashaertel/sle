-- @atlcompiler emftvm
-- @nsURI MM=http://www.eclipse.org/uml2/4.0.0/UML
-- @nsURI MM1=http://www.fsml.sle/FSML


module inplacefsml2uml;
create OUT: MM refining IN: MM, FSM: MM1;

rule Region {
	from
		s: MM!Region
	to
		t: MM!Region (
			subvertex <- MM!Vertex.allInstances().union(MM1!FSMState.allInstances() ->
					select(fsmState | not fsmState.existing)),
			transition <- MM!Transition.allInstances().union(MM1!FSMTransition.
					allInstances() -> select(fsmTransition | not fsmTransition.existing))
		)
}

--- Copy rules
rule CopyTransition {
	from
		s: MM!Transition (
			s.existing
		)
	to
		t: MM!Transition (
		)
}

rule CopyUmlVertex {
	from
		s: MM!Vertex (
			s.existing
		)
	to
		t: MM!Vertex (
		)
}

--- Delete rules
rule DeleteUmlVertex {
	from
		s: MM!Vertex (
			not s.existing
		)
	to
}

rule DeleteUmlTransition {
	from
		s: MM!Transition (
			not s.existing
		)
	to
}

--- Create rules
rule CreateUmlState {
	from
		s: MM1!FSMState (
			not s.existing and not s.initial
		)
	to
		t: MM!State (
			name <- s.name
		)
}

rule CreateUmlState_Initial {
	from
		s: MM1!FSMState (
			not s.existing and s.initial
		)
	to
		t: MM!Pseudostate (
			name <- 'Initial FSM State'
		)
}

rule CreateUmlTransition {
	from
		s: MM1!FSMTransition (
			not s.existing
		)
	to
		t: MM!Transition (
			name <- s.action,
			source <- if s.refImmediateComposite().existing then
					s.refImmediateComposite().mapping
				else
					s.refImmediateComposite()
				endif,
			target <- if s.target.existing then
					s.target.mapping
				else
					s.target
				endif
		)
}

--- Helper functions for state mapping
helper context MM!Vertex def: existing: Boolean =
	not (self.mapping = OclUndefined);

helper context MM!Vertex def: mapping: Boolean =
	MM1!FSMState.allInstances() -> any(fsmState | thisModule.stateMapping(fsmState,
			self));

helper context MM1!FSMState def: existing: Boolean =
	not (self.mapping = OclUndefined);

helper context MM1!FSMState def: mapping: Boolean =
	MM!Vertex.allInstances() -> any(umlState | thisModule.stateMapping(self, umlState));

helper def: stateMapping(fsmState: MM1!FSMState, umlState: MM!Vertex): Boolean =
	(fsmState.initial and umlState.oclIsTypeOf(MM!Pseudostate)) or (umlState.
			oclIsTypeOf(MM!State) and fsmState.name.equals(umlState.name) and not
			fsmState.initial);

--- Helper functions for transition mapping
helper context MM!Transition def: existing: Boolean =
	not (self.mapping = OclUndefined);

helper context MM!Transition def: mapping: Boolean =
	MM1!FSMTransition.allInstances() -> any(fsmTransition | thisModule.
			transitionMapping(fsmTransition, self));

helper context MM1!FSMTransition def: existing: Boolean =
	not (self.mapping = OclUndefined);

helper context MM1!FSMTransition def: mapping: Boolean =
	MM!Transition.allInstances() -> any(umlTransition | thisModule.
			transitionMapping(self, umlTransition));

helper def: transitionMapping(fsmTransition: MM1!FSMTransition, umlTransition:
		MM!Transition): Boolean =
	fsmTransition.action.equals(umlTransition.name) and thisModule.
			stateMapping(fsmTransition.refImmediateComposite(), umlTransition.source) and
			thisModule.stateMapping(fsmTransition.target, umlTransition.target);
