/*
* generated by Xtext
*/
grammar InternalInput;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package sle.fsml.input.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package sle.fsml.input.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import sle.fsml.input.services.InputGrammarAccess;

}

@parser::members {
 
 	private InputGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(InputGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleInput
entryRuleInput 
:
{ before(grammarAccess.getInputRule()); }
	 ruleInput
{ after(grammarAccess.getInputRule()); } 
	 EOF 
;

// Rule Input
ruleInput
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInputAccess().getGroup()); }
(rule__Input__Group__0)
{ after(grammarAccess.getInputAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInputEntry
entryRuleInputEntry 
:
{ before(grammarAccess.getInputEntryRule()); }
	 ruleInputEntry
{ after(grammarAccess.getInputEntryRule()); } 
	 EOF 
;

// Rule InputEntry
ruleInputEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInputEntryAccess().getValueAssignment()); }
(rule__InputEntry__ValueAssignment)
{ after(grammarAccess.getInputEntryAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Input__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__0__Impl
	rule__Input__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getInputAction_0()); }
(

)
{ after(grammarAccess.getInputAccess().getInputAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__1__Impl
	rule__Input__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getGroup_1()); }
(rule__Input__Group_1__0)?
{ after(grammarAccess.getInputAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__2__Impl
	rule__Input__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getLeftSquareBracketKeyword_2()); }

	'[' 

{ after(grammarAccess.getInputAccess().getLeftSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__3__Impl
	rule__Input__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getGroup_3()); }
(rule__Input__Group_3__0)?
{ after(grammarAccess.getInputAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__4__Impl
	rule__Input__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getRightSquareBracketKeyword_4()); }

	']' 

{ after(grammarAccess.getInputAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getFullStopKeyword_5()); }

	'.' 

{ after(grammarAccess.getInputAccess().getFullStopKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Input__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_1__0__Impl
	rule__Input__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getNameAssignment_1_0()); }
(rule__Input__NameAssignment_1_0)
{ after(grammarAccess.getInputAccess().getNameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getColonKeyword_1_1()); }

	':' 

{ after(grammarAccess.getInputAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Input__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_3__0__Impl
	rule__Input__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getInputsAssignment_3_0()); }
(rule__Input__InputsAssignment_3_0)
{ after(grammarAccess.getInputAccess().getInputsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getGroup_3_1()); }
(rule__Input__Group_3_1__0)*
{ after(grammarAccess.getInputAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Input__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_3_1__0__Impl
	rule__Input__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getInputAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getInputsAssignment_3_1_1()); }
(rule__Input__InputsAssignment_3_1_1)
{ after(grammarAccess.getInputAccess().getInputsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Input__NameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getNameIDTerminalRuleCall_1_0_0()); }
	RULE_ID{ after(grammarAccess.getInputAccess().getNameIDTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__InputsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getInputsInputEntryParserRuleCall_3_0_0()); }
	ruleInputEntry{ after(grammarAccess.getInputAccess().getInputsInputEntryParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__InputsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getInputsInputEntryParserRuleCall_3_1_1_0()); }
	ruleInputEntry{ after(grammarAccess.getInputAccess().getInputsInputEntryParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InputEntry__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputEntryAccess().getValueIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getInputEntryAccess().getValueIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_CM : '%' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


