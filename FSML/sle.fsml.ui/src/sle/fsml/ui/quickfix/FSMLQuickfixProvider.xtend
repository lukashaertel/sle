/*
* generated by Xtext
*/
package sle.fsml.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import sle.fsml.validation.FSMLValidator
import org.eclipse.jface.text.FindReplaceDocumentAdapter

/**
 * Quickfixes for the errors and warnings specified by the validator
 */
class FSMLQuickfixProvider extends org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
{

	/**
	 * Fix the 'No initial state' error by making the selected state initial
	 */
	@Fix(FSMLValidator::NO_INITIAL_STATE)
	def makeStateInitial(Issue issue, IssueResolutionAcceptor acceptor)
	{
		acceptor.accept(issue, 'Make initial', 'Makes the selected state initial.', 'make_initial.gif') [ context |
			// Open document and create a replacer
			val xtextDocument = context.xtextDocument
			val findReplacer = new FindReplaceDocumentAdapter(xtextDocument);
			// Find the previous state token
			val region = findReplacer.find(issue.offset, "state", false, true, true, false);
			// Replace it with "initial state"
			xtextDocument.replace(region.offset, region.length, "initial state");
		]
	}

	/**
	 * Fix the 'More than one initial state' error by making the selected state
	 * non-initial; not a complete fix if more than two states are initial, but those
	 * would require more inflection on the model and the quick-fixes are just text-
	 * and offset-based
	 */
	@Fix(FSMLValidator::MORE_THAN_ONE_INITIAL_STATE)
	def makeStateNonInitial(Issue issue, IssueResolutionAcceptor acceptor)
	{
		acceptor.accept(issue, 'Make non-initial', 'Makes the selected state non-initial.', 'make_noninitial.gif') [ context |
			// Open document and create a replacer
			val xtextDocument = context.xtextDocument
			val findReplacer = new FindReplaceDocumentAdapter(xtextDocument);
			// Find the previous initial token
			val region = findReplacer.find(issue.offset, "initial", false, true, true, false);
			// Replace it with an empty string
			xtextDocument.replace(region.offset, region.length, "");
		]
	}

	/**
	 * Fix the 'Explicit non-transition' warning by removing the target
	 */
	@Fix(FSMLValidator::EXPLICIT_NON_TRANSITION)
	def removeExplicitNonTransition(Issue issue, IssueResolutionAcceptor acceptor)
	{
		acceptor.accept(issue, 'Omit target',
			'Removes the explicit non-transition reference and leaves the input and action.',
			'remove_nontransition.gif') [ context |
			// Open document and create a replacer
			val xtextDocument = context.xtextDocument
			val findReplacer = new FindReplaceDocumentAdapter(xtextDocument);
			// Remove the token
			xtextDocument.replace(issue.offset, issue.length, "");
			// Find the previous arrow token
			val regionArrow = findReplacer.find(issue.offset, "->", false, true, false, false);
			// Replace it with an empty string
			xtextDocument.replace(regionArrow.offset, regionArrow.length, "");
		]
	}
}
