/*
 * generated by Xtext
 */
package sle.fsml.formatting

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import com.google.inject.Inject;
import sle.fsml.services.FSMLGrammarAccess
import sle.fsml.services.FSMLGrammarAccess.FSMStateElements

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
class FSMLFormatter extends AbstractDeclarativeFormatter {

	@Inject extension FSMLGrammarAccess

	override protected void configureFormatting(FormattingConfig c) {

		// Line wrap Comment
		c.setLinewrap(0, 1, 2).before(SL_COMMENTRule)
		c.setLinewrap(0, 1, 2).before(ML_COMMENTRule)
		c.setLinewrap(0, 1, 1).after(ML_COMMENTRule)

		// Line wrap FSML
		c.setLinewrap(1, 1, 2).after(FSMStateRule)
		c.setLinewrap(1, 1, 2).after(FSMTransitionRule)
		c.setLinewrap(1, 1, 2).after(FSMStateAccess.leftCurlyBracketKeyword_3)

		// Indentation FSML
		c.setIndentationIncrement().after(FSMStateAccess.leftCurlyBracketKeyword_3)
		c.setIndentationDecrement.before(FSMStateAccess.rightCurlyBracketKeyword_5)

		// No space FSML
		c.setNoSpace.around(FSMTransitionAccess.solidusKeyword_1_0);
		c.setNoSpace.before(FSMTransitionAccess.semicolonKeyword_3)

	}
}
