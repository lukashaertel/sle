/*
* generated by Xtext
*/
package sle.gbt.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import sle.gbt.xtext.services.GBTSGrammarAccess;

public class GBTSParser extends AbstractContentAssistParser {
	
	@Inject
	private GBTSGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected sle.gbt.xtext.ui.contentassist.antlr.internal.InternalGBTSParser createParser() {
		sle.gbt.xtext.ui.contentassist.antlr.internal.InternalGBTSParser result = new sle.gbt.xtext.ui.contentassist.antlr.internal.InternalGBTSParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTestAccess().getGroup(), "rule__Test__Group__0");
					put(grammarAccess.getTestAccess().getGroup_2(), "rule__Test__Group_2__0");
					put(grammarAccess.getTestAccess().getGroup_3(), "rule__Test__Group_3__0");
					put(grammarAccess.getQIDAccess().getGroup(), "rule__QID__Group__0");
					put(grammarAccess.getQIDAccess().getGroup_1(), "rule__QID__Group_1__0");
					put(grammarAccess.getModelAccess().getTestsAssignment(), "rule__Model__TestsAssignment");
					put(grammarAccess.getTestAccess().getRefAssignment_1(), "rule__Test__RefAssignment_1");
					put(grammarAccess.getTestAccess().getRuleAssignment_2_2(), "rule__Test__RuleAssignment_2_2");
					put(grammarAccess.getTestAccess().getDepthAssignment_3_2(), "rule__Test__DepthAssignment_3_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			sle.gbt.xtext.ui.contentassist.antlr.internal.InternalGBTSParser typedParser = (sle.gbt.xtext.ui.contentassist.antlr.internal.InternalGBTSParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public GBTSGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(GBTSGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
