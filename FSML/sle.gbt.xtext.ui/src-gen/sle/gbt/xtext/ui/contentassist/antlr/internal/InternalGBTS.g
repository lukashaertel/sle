/*
* generated by Xtext
*/
grammar InternalGBTS;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package sle.gbt.xtext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package sle.gbt.xtext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import sle.gbt.xtext.services.GBTSGrammarAccess;

}

@parser::members {
 
 	private GBTSGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(GBTSGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getTstsAssignment()); }
(rule__Model__TstsAssignment)*
{ after(grammarAccess.getModelAccess().getTstsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTest
entryRuleTest 
:
{ before(grammarAccess.getTestRule()); }
	 ruleTest
{ after(grammarAccess.getTestRule()); } 
	 EOF 
;

// Rule Test
ruleTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTestAccess().getGroup()); }
(rule__Test__Group__0)
{ after(grammarAccess.getTestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMember
entryRuleMember 
:
{ before(grammarAccess.getMemberRule()); }
	 ruleMember
{ after(grammarAccess.getMemberRule()); } 
	 EOF 
;

// Rule Member
ruleMember
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMemberAccess().getAlternatives()); }
(rule__Member__Alternatives)
{ after(grammarAccess.getMemberAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleApply
entryRuleApply 
:
{ before(grammarAccess.getApplyRule()); }
	 ruleApply
{ after(grammarAccess.getApplyRule()); } 
	 EOF 
;

// Rule Apply
ruleApply
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getApplyAccess().getGroup()); }
(rule__Apply__Group__0)
{ after(grammarAccess.getApplyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSub
entryRuleSub 
:
{ before(grammarAccess.getSubRule()); }
	 ruleSub
{ after(grammarAccess.getSubRule()); } 
	 EOF 
;

// Rule Sub
ruleSub
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubAccess().getGroup()); }
(rule__Sub__Group__0)
{ after(grammarAccess.getSubAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNew
entryRuleNew 
:
{ before(grammarAccess.getNewRule()); }
	 ruleNew
{ after(grammarAccess.getNewRule()); } 
	 EOF 
;

// Rule New
ruleNew
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNewAccess().getGroup()); }
(rule__New__Group__0)
{ after(grammarAccess.getNewAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSG
entryRuleSG 
:
{ before(grammarAccess.getSGRule()); }
	 ruleSG
{ after(grammarAccess.getSGRule()); } 
	 EOF 
;

// Rule SG
ruleSG
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSGAccess().getAlternativeParserRuleCall()); }
	ruleAlternative
{ after(grammarAccess.getSGAccess().getAlternativeParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAlternative
entryRuleAlternative 
:
{ before(grammarAccess.getAlternativeRule()); }
	 ruleAlternative
{ after(grammarAccess.getAlternativeRule()); } 
	 EOF 
;

// Rule Alternative
ruleAlternative
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAlternativeAccess().getGroup()); }
(rule__Alternative__Group__0)
{ after(grammarAccess.getAlternativeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSequence
entryRuleSequence 
:
{ before(grammarAccess.getSequenceRule()); }
	 ruleSequence
{ after(grammarAccess.getSequenceRule()); } 
	 EOF 
;

// Rule Sequence
ruleSequence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSequenceAccess().getGroup()); }
(rule__Sequence__Group__0)
{ after(grammarAccess.getSequenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCardinality
entryRuleCardinality 
:
{ before(grammarAccess.getCardinalityRule()); }
	 ruleCardinality
{ after(grammarAccess.getCardinalityRule()); } 
	 EOF 
;

// Rule Cardinality
ruleCardinality
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCardinalityAccess().getGroup()); }
(rule__Cardinality__Group__0)
{ after(grammarAccess.getCardinalityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperated
entryRuleOperated 
:
{ before(grammarAccess.getOperatedRule()); }
	 ruleOperated
{ after(grammarAccess.getOperatedRule()); } 
	 EOF 
;

// Rule Operated
ruleOperated
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperatedAccess().getAlternatives()); }
(rule__Operated__Alternatives)
{ after(grammarAccess.getOperatedAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerminal
entryRuleTerminal 
:
{ before(grammarAccess.getTerminalRule()); }
	 ruleTerminal
{ after(grammarAccess.getTerminalRule()); } 
	 EOF 
;

// Rule Terminal
ruleTerminal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTerminalAccess().getAlternatives()); }
(rule__Terminal__Alternatives)
{ after(grammarAccess.getTerminalAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenthesizedElement
entryRuleParenthesizedElement 
:
{ before(grammarAccess.getParenthesizedElementRule()); }
	 ruleParenthesizedElement
{ after(grammarAccess.getParenthesizedElementRule()); } 
	 EOF 
;

// Rule ParenthesizedElement
ruleParenthesizedElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParenthesizedElementAccess().getGroup()); }
(rule__ParenthesizedElement__Group__0)
{ after(grammarAccess.getParenthesizedElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGrammarID
entryRuleGrammarID 
:
{ before(grammarAccess.getGrammarIDRule()); }
	 ruleGrammarID
{ after(grammarAccess.getGrammarIDRule()); } 
	 EOF 
;

// Rule GrammarID
ruleGrammarID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGrammarIDAccess().getGroup()); }
(rule__GrammarID__Group__0)
{ after(grammarAccess.getGrammarIDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Member__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberAccess().getApplyParserRuleCall_0()); }
	ruleApply
{ after(grammarAccess.getMemberAccess().getApplyParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMemberAccess().getSubParserRuleCall_1()); }
	ruleSub
{ after(grammarAccess.getMemberAccess().getSubParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getMemberAccess().getNewParserRuleCall_2()); }
	ruleNew
{ after(grammarAccess.getMemberAccess().getNewParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getGroup_1_0()); }
(rule__Cardinality__Group_1_0__0)
{ after(grammarAccess.getCardinalityAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getCardinalityAccess().getGroup_1_1()); }
(rule__Cardinality__Group_1_1__0)
{ after(grammarAccess.getCardinalityAccess().getGroup_1_1()); }
)

    |(
{ before(grammarAccess.getCardinalityAccess().getGroup_1_2()); }
(rule__Cardinality__Group_1_2__0)
{ after(grammarAccess.getCardinalityAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operated__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatedAccess().getGroup_0()); }
(rule__Operated__Group_0__0)
{ after(grammarAccess.getOperatedAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getOperatedAccess().getGroup_1()); }
(rule__Operated__Group_1__0)
{ after(grammarAccess.getOperatedAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getOperatedAccess().getTerminalParserRuleCall_2()); }
	ruleTerminal
{ after(grammarAccess.getOperatedAccess().getTerminalParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalAccess().getGroup_0()); }
(rule__Terminal__Group_0__0)
{ after(grammarAccess.getTerminalAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getTerminalAccess().getGroup_1()); }
(rule__Terminal__Group_1__0)
{ after(grammarAccess.getTerminalAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getTerminalAccess().getGroup_2()); }
(rule__Terminal__Group_2__0)
{ after(grammarAccess.getTerminalAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getTerminalAccess().getParenthesizedElementParserRuleCall_3()); }
	ruleParenthesizedElement
{ after(grammarAccess.getTerminalAccess().getParenthesizedElementParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Test__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__0__Impl
	rule__Test__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getTestKeyword_0()); }

	'test' 

{ after(grammarAccess.getTestAccess().getTestKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__1__Impl
	rule__Test__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getNameAssignment_1()); }
(rule__Test__NameAssignment_1)
{ after(grammarAccess.getTestAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__2__Impl
	rule__Test__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getColonEqualsSignKeyword_2()); }

	':=' 

{ after(grammarAccess.getTestAccess().getColonEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__3__Impl
	rule__Test__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getRefAssignment_3()); }
(rule__Test__RefAssignment_3)
{ after(grammarAccess.getTestAccess().getRefAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__4__Impl
	rule__Test__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getUnorderedGroup_4()); }
(rule__Test__UnorderedGroup_4)
{ after(grammarAccess.getTestAccess().getUnorderedGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__5__Impl
	rule__Test__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getLeftCurlyBracketKeyword_5()); }

	'{' 

{ after(grammarAccess.getTestAccess().getLeftCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__6__Impl
	rule__Test__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getMembersAssignment_6()); }
(rule__Test__MembersAssignment_6)*
{ after(grammarAccess.getTestAccess().getMembersAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getRightCurlyBracketKeyword_7()); }

	'}' 

{ after(grammarAccess.getTestAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Test__Group_4_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group_4_0__0__Impl
	rule__Test__Group_4_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_4_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getHasLbrAssignment_4_0_0()); }
(rule__Test__HasLbrAssignment_4_0_0)
{ after(grammarAccess.getTestAccess().getHasLbrAssignment_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group_4_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group_4_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_4_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getLbrAssignment_4_0_1()); }
(rule__Test__LbrAssignment_4_0_1)
{ after(grammarAccess.getTestAccess().getLbrAssignment_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Test__Group_4_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group_4_1__0__Impl
	rule__Test__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_4_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getHasLbrInitialAssignment_4_1_0()); }
(rule__Test__HasLbrInitialAssignment_4_1_0)
{ after(grammarAccess.getTestAccess().getHasLbrInitialAssignment_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group_4_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group_4_1__1__Impl
	rule__Test__Group_4_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_4_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getHyphenMinusKeyword_4_1_1()); }

	'-' 

{ after(grammarAccess.getTestAccess().getHyphenMinusKeyword_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group_4_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group_4_1__2__Impl
	rule__Test__Group_4_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_4_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getInitialKeyword_4_1_2()); }

	'initial' 

{ after(grammarAccess.getTestAccess().getInitialKeyword_4_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group_4_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group_4_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_4_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getLbrInitialAssignment_4_1_3()); }
(rule__Test__LbrInitialAssignment_4_1_3)
{ after(grammarAccess.getTestAccess().getLbrInitialAssignment_4_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Test__Group_4_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group_4_2__0__Impl
	rule__Test__Group_4_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_4_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getHasStartruleAssignment_4_2_0()); }
(rule__Test__HasStartruleAssignment_4_2_0)
{ after(grammarAccess.getTestAccess().getHasStartruleAssignment_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group_4_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group_4_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_4_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getStartruleAssignment_4_2_1()); }
(rule__Test__StartruleAssignment_4_2_1)
{ after(grammarAccess.getTestAccess().getStartruleAssignment_4_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Apply__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Apply__Group__0__Impl
	rule__Apply__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getApplyKeyword_0()); }

	'apply' 

{ after(grammarAccess.getApplyAccess().getApplyKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Apply__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Apply__Group__1__Impl
	rule__Apply__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getMinOrItAssignment_1()); }
(rule__Apply__MinOrItAssignment_1)
{ after(grammarAccess.getApplyAccess().getMinOrItAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Apply__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Apply__Group__2__Impl
	rule__Apply__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getGroup_2()); }
(rule__Apply__Group_2__0)?
{ after(grammarAccess.getApplyAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Apply__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Apply__Group__3__Impl
	rule__Apply__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getGroup_3()); }
(rule__Apply__Group_3__0)?
{ after(grammarAccess.getApplyAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Apply__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Apply__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getApplyAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Apply__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Apply__Group_2__0__Impl
	rule__Apply__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getHasMaxAssignment_2_0()); }
(rule__Apply__HasMaxAssignment_2_0)
{ after(grammarAccess.getApplyAccess().getHasMaxAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Apply__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Apply__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getMaxAssignment_2_1()); }
(rule__Apply__MaxAssignment_2_1)
{ after(grammarAccess.getApplyAccess().getMaxAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Apply__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Apply__Group_3__0__Impl
	rule__Apply__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getHasNumAssignment_3_0()); }
(rule__Apply__HasNumAssignment_3_0)
{ after(grammarAccess.getApplyAccess().getHasNumAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Apply__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Apply__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getNumAssignment_3_1()); }
(rule__Apply__NumAssignment_3_1)
{ after(grammarAccess.getApplyAccess().getNumAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Sub__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sub__Group__0__Impl
	rule__Sub__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubAccess().getSubKeyword_0()); }

	'sub' 

{ after(grammarAccess.getSubAccess().getSubKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sub__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sub__Group__1__Impl
	rule__Sub__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubAccess().getRuleAssignment_1()); }
(rule__Sub__RuleAssignment_1)
{ after(grammarAccess.getSubAccess().getRuleAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sub__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sub__Group__2__Impl
	rule__Sub__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubAccess().getColonEqualsSignKeyword_2()); }

	':=' 

{ after(grammarAccess.getSubAccess().getColonEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sub__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sub__Group__3__Impl
	rule__Sub__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubAccess().getSubstitutionAssignment_3()); }
(rule__Sub__SubstitutionAssignment_3)
{ after(grammarAccess.getSubAccess().getSubstitutionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sub__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sub__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getSubAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__New__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__New__Group__0__Impl
	rule__New__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__New__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewAccess().getNewKeyword_0()); }

	'new' 

{ after(grammarAccess.getNewAccess().getNewKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__New__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__New__Group__1__Impl
	rule__New__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__New__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewAccess().getTermAssignment_1()); }
(rule__New__TermAssignment_1)?
{ after(grammarAccess.getNewAccess().getTermAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__New__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__New__Group__2__Impl
	rule__New__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__New__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewAccess().getRuleAssignment_2()); }
(rule__New__RuleAssignment_2)
{ after(grammarAccess.getNewAccess().getRuleAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__New__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__New__Group__3__Impl
	rule__New__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__New__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewAccess().getColonEqualsSignKeyword_3()); }

	':=' 

{ after(grammarAccess.getNewAccess().getColonEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__New__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__New__Group__4__Impl
	rule__New__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__New__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewAccess().getDefinitionAssignment_4()); }
(rule__New__DefinitionAssignment_4)
{ after(grammarAccess.getNewAccess().getDefinitionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__New__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__New__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__New__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getNewAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Alternative__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group__0__Impl
	rule__Alternative__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getSequenceParserRuleCall_0()); }
	ruleSequence
{ after(grammarAccess.getAlternativeAccess().getSequenceParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternative__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getGroup_1()); }
(rule__Alternative__Group_1__0)?
{ after(grammarAccess.getAlternativeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Alternative__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group_1__0__Impl
	rule__Alternative__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getAlternativeLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAlternativeAccess().getAlternativeLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternative__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group_1__1__Impl
	rule__Alternative__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getVerticalLineKeyword_1_1()); }

	'|' 

{ after(grammarAccess.getAlternativeAccess().getVerticalLineKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternative__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getRightAssignment_1_2()); }
(rule__Alternative__RightAssignment_1_2)
{ after(grammarAccess.getAlternativeAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Sequence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group__0__Impl
	rule__Sequence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getCardinalityParserRuleCall_0()); }
	ruleCardinality
{ after(grammarAccess.getSequenceAccess().getCardinalityParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sequence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getGroup_1()); }
(rule__Sequence__Group_1__0)?
{ after(grammarAccess.getSequenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Sequence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group_1__0__Impl
	rule__Sequence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getSequenceLeftAction_1_0()); }
(

)
{ after(grammarAccess.getSequenceAccess().getSequenceLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sequence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getRightAssignment_1_1()); }
(rule__Sequence__RightAssignment_1_1)
{ after(grammarAccess.getSequenceAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Cardinality__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cardinality__Group__0__Impl
	rule__Cardinality__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getOperatedParserRuleCall_0()); }
	ruleOperated
{ after(grammarAccess.getCardinalityAccess().getOperatedParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cardinality__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cardinality__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getAlternatives_1()); }
(rule__Cardinality__Alternatives_1)?
{ after(grammarAccess.getCardinalityAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Cardinality__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cardinality__Group_1_0__0__Impl
	rule__Cardinality__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getOptionalOfAction_1_0_0()); }
(

)
{ after(grammarAccess.getCardinalityAccess().getOptionalOfAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cardinality__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cardinality__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getQuestionMarkKeyword_1_0_1()); }

	'?' 

{ after(grammarAccess.getCardinalityAccess().getQuestionMarkKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Cardinality__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cardinality__Group_1_1__0__Impl
	rule__Cardinality__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getStarOfAction_1_1_0()); }
(

)
{ after(grammarAccess.getCardinalityAccess().getStarOfAction_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cardinality__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cardinality__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getAsteriskKeyword_1_1_1()); }

	'*' 

{ after(grammarAccess.getCardinalityAccess().getAsteriskKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Cardinality__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cardinality__Group_1_2__0__Impl
	rule__Cardinality__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getPlusOfAction_1_2_0()); }
(

)
{ after(grammarAccess.getCardinalityAccess().getPlusOfAction_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cardinality__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cardinality__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getPlusSignKeyword_1_2_1()); }

	'+' 

{ after(grammarAccess.getCardinalityAccess().getPlusSignKeyword_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operated__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operated__Group_0__0__Impl
	rule__Operated__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operated__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatedAccess().getHyphenMinusGreaterThanSignKeyword_0_0()); }

	'->' 

{ after(grammarAccess.getOperatedAccess().getHyphenMinusGreaterThanSignKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operated__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operated__Group_0__1__Impl
	rule__Operated__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operated__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatedAccess().getUntilAction_0_1()); }
(

)
{ after(grammarAccess.getOperatedAccess().getUntilAction_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operated__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operated__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operated__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatedAccess().getOfAssignment_0_2()); }
(rule__Operated__OfAssignment_0_2)
{ after(grammarAccess.getOperatedAccess().getOfAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Operated__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operated__Group_1__0__Impl
	rule__Operated__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operated__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatedAccess().getExclamationMarkKeyword_1_0()); }

	'!' 

{ after(grammarAccess.getOperatedAccess().getExclamationMarkKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operated__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operated__Group_1__1__Impl
	rule__Operated__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operated__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatedAccess().getNegationAction_1_1()); }
(

)
{ after(grammarAccess.getOperatedAccess().getNegationAction_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operated__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operated__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operated__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatedAccess().getOfAssignment_1_2()); }
(rule__Operated__OfAssignment_1_2)
{ after(grammarAccess.getOperatedAccess().getOfAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Terminal__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Terminal__Group_0__0__Impl
	rule__Terminal__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalAccess().getRangeAction_0_0()); }
(

)
{ after(grammarAccess.getTerminalAccess().getRangeAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Terminal__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Terminal__Group_0__1__Impl
	rule__Terminal__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalAccess().getMinAssignment_0_1()); }
(rule__Terminal__MinAssignment_0_1)
{ after(grammarAccess.getTerminalAccess().getMinAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Terminal__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Terminal__Group_0__2__Impl
	rule__Terminal__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalAccess().getFullStopFullStopKeyword_0_2()); }

	'..' 

{ after(grammarAccess.getTerminalAccess().getFullStopFullStopKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Terminal__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Terminal__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalAccess().getMaxAssignment_0_3()); }
(rule__Terminal__MaxAssignment_0_3)
{ after(grammarAccess.getTerminalAccess().getMaxAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Terminal__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Terminal__Group_1__0__Impl
	rule__Terminal__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalAccess().getSingleAction_1_0()); }
(

)
{ after(grammarAccess.getTerminalAccess().getSingleAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Terminal__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Terminal__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalAccess().getTokenAssignment_1_1()); }
(rule__Terminal__TokenAssignment_1_1)
{ after(grammarAccess.getTerminalAccess().getTokenAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Terminal__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Terminal__Group_2__0__Impl
	rule__Terminal__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalAccess().getReferenceAction_2_0()); }
(

)
{ after(grammarAccess.getTerminalAccess().getReferenceAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Terminal__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Terminal__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalAccess().getToAssignment_2_1()); }
(rule__Terminal__ToAssignment_2_1)
{ after(grammarAccess.getTerminalAccess().getToAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParenthesizedElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedElement__Group__0__Impl
	rule__ParenthesizedElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedElementAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParenthesizedElementAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedElement__Group__1__Impl
	rule__ParenthesizedElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedElementAccess().getAlternativeParserRuleCall_1()); }
	ruleAlternative
{ after(grammarAccess.getParenthesizedElementAccess().getAlternativeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedElement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedElement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedElement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedElementAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParenthesizedElementAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__GrammarID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GrammarID__Group__0__Impl
	rule__GrammarID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GrammarID__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGrammarIDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getGrammarIDAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GrammarID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GrammarID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GrammarID__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGrammarIDAccess().getGroup_1()); }
(rule__GrammarID__Group_1__0)*
{ after(grammarAccess.getGrammarIDAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GrammarID__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GrammarID__Group_1__0__Impl
	rule__GrammarID__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GrammarID__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGrammarIDAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getGrammarIDAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GrammarID__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GrammarID__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GrammarID__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGrammarIDAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getGrammarIDAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Test__UnorderedGroup_4
    @init {
    	int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getTestAccess().getUnorderedGroup_4());
    }
:
	rule__Test__UnorderedGroup_4__0
	?
	
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getTestAccess().getUnorderedGroup_4());
	restoreStackSize(stackSize);
}


rule__Test__UnorderedGroup_4__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
    }
:
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTestAccess().getUnorderedGroup_4(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTestAccess().getUnorderedGroup_4(), 0);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getTestAccess().getGroup_4_0()); }
						(rule__Test__Group_4_0__0)
						{ after(grammarAccess.getTestAccess().getGroup_4_0()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTestAccess().getUnorderedGroup_4(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTestAccess().getUnorderedGroup_4(), 1);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getTestAccess().getGroup_4_1()); }
						(rule__Test__Group_4_1__0)
						{ after(grammarAccess.getTestAccess().getGroup_4_1()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTestAccess().getUnorderedGroup_4(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTestAccess().getUnorderedGroup_4(), 2);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getTestAccess().getGroup_4_2()); }
						(rule__Test__Group_4_2__0)
						{ after(grammarAccess.getTestAccess().getGroup_4_2()); }
					)
 				)
			)  

		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTestAccess().getUnorderedGroup_4());
	restoreStackSize(stackSize);
}


rule__Test__UnorderedGroup_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__UnorderedGroup_4__Impl
	rule__Test__UnorderedGroup_4__1?
;
finally {
	restoreStackSize(stackSize);
}


rule__Test__UnorderedGroup_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__UnorderedGroup_4__Impl
	rule__Test__UnorderedGroup_4__2?
;
finally {
	restoreStackSize(stackSize);
}


rule__Test__UnorderedGroup_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__UnorderedGroup_4__Impl
;
finally {
	restoreStackSize(stackSize);
}








rule__Model__TstsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getTstsTestParserRuleCall_0()); }
	ruleTest{ after(grammarAccess.getModelAccess().getTstsTestParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Test__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTestAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Test__RefAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getRefGrammarCrossReference_3_0()); }
(
{ before(grammarAccess.getTestAccess().getRefGrammarGrammarIDParserRuleCall_3_0_1()); }
	ruleGrammarID{ after(grammarAccess.getTestAccess().getRefGrammarGrammarIDParserRuleCall_3_0_1()); }
)
{ after(grammarAccess.getTestAccess().getRefGrammarCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Test__HasLbrAssignment_4_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getHasLbrLbrKeyword_4_0_0_0()); }
(
{ before(grammarAccess.getTestAccess().getHasLbrLbrKeyword_4_0_0_0()); }

	'lbr' 

{ after(grammarAccess.getTestAccess().getHasLbrLbrKeyword_4_0_0_0()); }
)

{ after(grammarAccess.getTestAccess().getHasLbrLbrKeyword_4_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Test__LbrAssignment_4_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getLbrINTTerminalRuleCall_4_0_1_0()); }
	RULE_INT{ after(grammarAccess.getTestAccess().getLbrINTTerminalRuleCall_4_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Test__HasLbrInitialAssignment_4_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getHasLbrInitialLbrKeyword_4_1_0_0()); }
(
{ before(grammarAccess.getTestAccess().getHasLbrInitialLbrKeyword_4_1_0_0()); }

	'lbr' 

{ after(grammarAccess.getTestAccess().getHasLbrInitialLbrKeyword_4_1_0_0()); }
)

{ after(grammarAccess.getTestAccess().getHasLbrInitialLbrKeyword_4_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Test__LbrInitialAssignment_4_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getLbrInitialINTTerminalRuleCall_4_1_3_0()); }
	RULE_INT{ after(grammarAccess.getTestAccess().getLbrInitialINTTerminalRuleCall_4_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Test__HasStartruleAssignment_4_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getHasStartruleStartKeyword_4_2_0_0()); }
(
{ before(grammarAccess.getTestAccess().getHasStartruleStartKeyword_4_2_0_0()); }

	'start' 

{ after(grammarAccess.getTestAccess().getHasStartruleStartKeyword_4_2_0_0()); }
)

{ after(grammarAccess.getTestAccess().getHasStartruleStartKeyword_4_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Test__StartruleAssignment_4_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getStartruleAbstractRuleCrossReference_4_2_1_0()); }
(
{ before(grammarAccess.getTestAccess().getStartruleAbstractRuleIDTerminalRuleCall_4_2_1_0_1()); }
	RULE_ID{ after(grammarAccess.getTestAccess().getStartruleAbstractRuleIDTerminalRuleCall_4_2_1_0_1()); }
)
{ after(grammarAccess.getTestAccess().getStartruleAbstractRuleCrossReference_4_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Test__MembersAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getMembersMemberParserRuleCall_6_0()); }
	ruleMember{ after(grammarAccess.getTestAccess().getMembersMemberParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__MinOrItAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getMinOrItINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getApplyAccess().getMinOrItINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__HasMaxAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getHasMaxFullStopFullStopKeyword_2_0_0()); }
(
{ before(grammarAccess.getApplyAccess().getHasMaxFullStopFullStopKeyword_2_0_0()); }

	'..' 

{ after(grammarAccess.getApplyAccess().getHasMaxFullStopFullStopKeyword_2_0_0()); }
)

{ after(grammarAccess.getApplyAccess().getHasMaxFullStopFullStopKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__MaxAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getMaxINTTerminalRuleCall_2_1_0()); }
	RULE_INT{ after(grammarAccess.getApplyAccess().getMaxINTTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__HasNumAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getHasNumColonKeyword_3_0_0()); }
(
{ before(grammarAccess.getApplyAccess().getHasNumColonKeyword_3_0_0()); }

	':' 

{ after(grammarAccess.getApplyAccess().getHasNumColonKeyword_3_0_0()); }
)

{ after(grammarAccess.getApplyAccess().getHasNumColonKeyword_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Apply__NumAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplyAccess().getNumINTTerminalRuleCall_3_1_0()); }
	RULE_INT{ after(grammarAccess.getApplyAccess().getNumINTTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sub__RuleAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubAccess().getRuleAbstractRuleCrossReference_1_0()); }
(
{ before(grammarAccess.getSubAccess().getRuleAbstractRuleIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getSubAccess().getRuleAbstractRuleIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getSubAccess().getRuleAbstractRuleCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sub__SubstitutionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubAccess().getSubstitutionSGParserRuleCall_3_0()); }
	ruleSG{ after(grammarAccess.getSubAccess().getSubstitutionSGParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__New__TermAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewAccess().getTermTerminalKeyword_1_0()); }
(
{ before(grammarAccess.getNewAccess().getTermTerminalKeyword_1_0()); }

	'terminal' 

{ after(grammarAccess.getNewAccess().getTermTerminalKeyword_1_0()); }
)

{ after(grammarAccess.getNewAccess().getTermTerminalKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__New__RuleAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewAccess().getRuleIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getNewAccess().getRuleIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__New__DefinitionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewAccess().getDefinitionSGParserRuleCall_4_0()); }
	ruleSG{ after(grammarAccess.getNewAccess().getDefinitionSGParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getRightAlternativeParserRuleCall_1_2_0()); }
	ruleAlternative{ after(grammarAccess.getAlternativeAccess().getRightAlternativeParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getRightSequenceParserRuleCall_1_1_0()); }
	ruleSequence{ after(grammarAccess.getSequenceAccess().getRightSequenceParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operated__OfAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatedAccess().getOfOperatedParserRuleCall_0_2_0()); }
	ruleOperated{ after(grammarAccess.getOperatedAccess().getOfOperatedParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operated__OfAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatedAccess().getOfOperatedParserRuleCall_1_2_0()); }
	ruleOperated{ after(grammarAccess.getOperatedAccess().getOfOperatedParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__MinAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalAccess().getMinSTRINGTerminalRuleCall_0_1_0()); }
	RULE_STRING{ after(grammarAccess.getTerminalAccess().getMinSTRINGTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__MaxAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalAccess().getMaxSTRINGTerminalRuleCall_0_3_0()); }
	RULE_STRING{ after(grammarAccess.getTerminalAccess().getMaxSTRINGTerminalRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__TokenAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalAccess().getTokenSTRINGTerminalRuleCall_1_1_0()); }
	RULE_STRING{ after(grammarAccess.getTerminalAccess().getTokenSTRINGTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__ToAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalAccess().getToIDTerminalRuleCall_2_1_0()); }
	RULE_ID{ after(grammarAccess.getTerminalAccess().getToIDTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


