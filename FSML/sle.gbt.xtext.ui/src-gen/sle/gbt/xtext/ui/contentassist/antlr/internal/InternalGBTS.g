/*
* generated by Xtext
*/
grammar InternalGBTS;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package sle.gbt.xtext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package sle.gbt.xtext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import sle.gbt.xtext.services.GBTSGrammarAccess;

}

@parser::members {
 
 	private GBTSGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(GBTSGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getModelAccess().getTestsAssignment()); }
(rule__Model__TestsAssignment)
{ after(grammarAccess.getModelAccess().getTestsAssignment()); }
)
(
{ before(grammarAccess.getModelAccess().getTestsAssignment()); }
(rule__Model__TestsAssignment)*
{ after(grammarAccess.getModelAccess().getTestsAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTest
entryRuleTest 
:
{ before(grammarAccess.getTestRule()); }
	 ruleTest
{ after(grammarAccess.getTestRule()); } 
	 EOF 
;

// Rule Test
ruleTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTestAccess().getGroup()); }
(rule__Test__Group__0)
{ after(grammarAccess.getTestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQID
entryRuleQID 
:
{ before(grammarAccess.getQIDRule()); }
	 ruleQID
{ after(grammarAccess.getQIDRule()); } 
	 EOF 
;

// Rule QID
ruleQID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQIDAccess().getGroup()); }
(rule__QID__Group__0)
{ after(grammarAccess.getQIDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Test__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__0__Impl
	rule__Test__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getTestKeyword_0()); }

	'test' 

{ after(grammarAccess.getTestAccess().getTestKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__1__Impl
	rule__Test__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getRefAssignment_1()); }
(rule__Test__RefAssignment_1)
{ after(grammarAccess.getTestAccess().getRefAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__2__Impl
	rule__Test__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getGroup_2()); }
(rule__Test__Group_2__0)?
{ after(grammarAccess.getTestAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getGroup_3()); }
(rule__Test__Group_3__0)?
{ after(grammarAccess.getTestAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Test__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group_2__0__Impl
	rule__Test__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getStartKeyword_2_0()); }

	'start' 

{ after(grammarAccess.getTestAccess().getStartKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group_2__1__Impl
	rule__Test__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getAtKeyword_2_1()); }

	'at' 

{ after(grammarAccess.getTestAccess().getAtKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getRuleAssignment_2_2()); }
(rule__Test__RuleAssignment_2_2)
{ after(grammarAccess.getTestAccess().getRuleAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Test__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group_3__0__Impl
	rule__Test__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getWithKeyword_3_0()); }

	'with' 

{ after(grammarAccess.getTestAccess().getWithKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group_3__1__Impl
	rule__Test__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getDepthKeyword_3_1()); }

	'depth' 

{ after(grammarAccess.getTestAccess().getDepthKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getDepthAssignment_3_2()); }
(rule__Test__DepthAssignment_3_2)
{ after(grammarAccess.getTestAccess().getDepthAssignment_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QID__Group__0__Impl
	rule__QID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQIDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQIDAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQIDAccess().getGroup_1()); }
(rule__QID__Group_1__0)?
{ after(grammarAccess.getQIDAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QID__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QID__Group_1__0__Impl
	rule__QID__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQIDAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQIDAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QID__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QID__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQIDAccess().getQIDParserRuleCall_1_1()); }
	ruleQID
{ after(grammarAccess.getQIDAccess().getQIDParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__TestsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getTestsTestParserRuleCall_0()); }
	ruleTest{ after(grammarAccess.getModelAccess().getTestsTestParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Test__RefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getRefGrammarCrossReference_1_0()); }
(
{ before(grammarAccess.getTestAccess().getRefGrammarQIDParserRuleCall_1_0_1()); }
	ruleQID{ after(grammarAccess.getTestAccess().getRefGrammarQIDParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getTestAccess().getRefGrammarCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Test__RuleAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getRuleAbstractRuleCrossReference_2_2_0()); }
(
{ before(grammarAccess.getTestAccess().getRuleAbstractRuleIDTerminalRuleCall_2_2_0_1()); }
	RULE_ID{ after(grammarAccess.getTestAccess().getRuleAbstractRuleIDTerminalRuleCall_2_2_0_1()); }
)
{ after(grammarAccess.getTestAccess().getRuleAbstractRuleCrossReference_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Test__DepthAssignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getDepthINTTerminalRuleCall_3_2_0()); }
	RULE_INT{ after(grammarAccess.getTestAccess().getDepthINTTerminalRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


